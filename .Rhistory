}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<100 ){
b[i,j+1]=current
counter=counter+1
#a[j]=1  # if you loose all your money it counts that
}
}
}
View(b)
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<100 ){
b[i,j+1]=current
counter=counter+1
break
#a[j]=1  # if you loose all your money it counts that
}
}
}
View(b)
View(b)
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
}
View(b)
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
}
View(b)
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
}
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
}
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
current=1000
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
current=1000
b<-matrix(rep(NA),nrow=10,ncol=5001)
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current<=0 ){
b[i,j+1]=current
a[j]=1  # if you loose all your money it counts that
break
}
}
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current< 0 ){
a[j]=1  # if you loose all your money it counts that
break
}
}
}
View(b)
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the numeber of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else if (x[j]==0 & current>0){
current<-current-(100)
b[i,j+1]=current
}else if (current< 0 ){
a[j]=1  # if you loose all your money it counts that
}
}
}
View(b)
a
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the number of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else  (x[j]==0 & current>0){
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the number of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else  (x[j]==0 & current>0)
current<-current-(100)
b[i,j+1]=current
if (current<= 0 ){
a[j]=1  # if you loose all your money it counts that
break
}
}
}
View(b)
starting_prob=0.48
current_prob=starting_prob
wager=100
tally=0
bankroll=500000
Markov<-function(start,starting_prob, wager,inc,iterations){
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
p[i+1]<-1 # keep the probability the same
}
}else{
bankroll<-bankroll-wager
starting_prob=p[i+1]
}
}
return(bankroll)
}
Markov(500000,0.48,100.0.01,100000)
for ( i in iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
p[i+1]<-1 # keep the probability the same
}
}else{
bankroll<-bankroll-wager
starting_prob=p[i+1]
}
}
iterations=100000
for ( i in iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
p[i+1]<-1 # keep the probability the same
}
}else{
bankroll<-bankroll-wager
starting_prob=p[i+1]
}
}
starting_prob=0.48
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
Markov<-function(start,starting_prob, wager,inc,iterations){
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
p[i+1]<-1 # keep the probability the same
}
}else{
bankroll<-bankroll-wager
starting_prob=p[i+1]
}
}
return(bankroll)
}
Markov(500000,0.48,100,0.01,100000)
Markov<-function(start,starting_prob, wager,inc,iterations){
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
1<-p[i+1] # keep the probability the same
}
}else{
bankroll[i+1]<-bankroll[i]-wager
starting_prob=p[i+1]
}
}
return(bankroll[i])
}
Markov(500000,0.48,100,0.01,100000)
Markov<-function(start,starting_prob, wager,inc,iterations){
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in 1:iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
1<-p[i+1] # keep the probability the same
}
}else{
bankroll[i+1]<-bankroll[i]-wager
starting_prob=p[i+1]
}
}
return(bankroll[i])
}
Markov(500000,0.48,100,0.01,100000)
iterations=100000
starting_prob=0,48
starting_prob=0.48
start=5000
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in 1:iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
1<-p[i+1] # keep the probability the same
}
}else{
bankroll[i+1]<-bankroll[i]-wager
starting_prob=p[i+1]
}
}
wager=100
p<-rep(NA,iterations+1)
bankroll<-rep(NA,iterations+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in 1:iterations){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
1<-p[i+1] # keep the probability the same
}
}else{
bankroll[i+1]<-bankroll[i]-wager
starting_prob=p[i+1]
}
}
p<-rep(NA,iterations+1)
bets=1000
p<-rep(NA,bets+1)
bankroll<-rep(NA,bets+1)
start=5000
bankroll[1]<-start
p[1]<-starting_prob
starting_prob=0.48
p[1]<-starting_prob
wager=100
inc=0.01
Markov<-function(start,starting_prob, wager,inc,bets){
p<-rep(NA,bets+1)
bankroll<-rep(NA,bets+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in 1:bets){
if(rbinom(1,1,p[i])==1 ){ # if you win
bankroll[i+1]<-bankroll[i]+wager
if(p[i]+inc <=1){ #if the current probability plus the increment is less than or equal to 1
p[i+1]<-p[i]+inc # update the new probability by adding an increment
}
else{
1<-p[i+1] # keep the probability the same
}
}else{  #if you loose
bankroll[i+1]<-bankroll[i]-wager
starting_prob=p[i+1]
}
}
return(bankroll[i])  # return the final amount of money i have
}
Markov(5000,0.48,100,0.01,100000)
Markov<-function(start,starting_prob, wager,inc,bets){
p<-rep(NA,bets+1)
bankroll<-rep(NA,bets+1)
bankroll[1]<-start
p[1]<-starting_prob
for ( i in 1:bets){
if(rbinom(1,1,p[i])=1 ){ # if you win
rbinom(1,1,0.48)
rbinom(1,1,0.48)
if (rbinom(1,1,0,48)==1){ print "GREAT"}
if (rbinom(1,1,0,48)==1){ print "a"}
if (rbinom(1,1,0,48)==1){
print ("a")}
if (rbinom(1,1,0.48)==1){
print ("a")}
if (rbinom(1,1,0.48)==1){
print ("a")}
# the number of rows is the number of iterations that you are doing
# the number of columns is a "game" in this case i want 5000.
a<-(rep(0,5000))# this counts the number of games that went bankrupt on the 100th bet
b<-matrix(rep(NA),nrow=10,ncol=5001)
current=1000
b[,1]=current
counter=0
for ( i in 1:10 ){       # this is the rows
x<-rbinom(5000,1,0.50) # let p be the probaility of loosing
for ( j in 1:5000){ #inner is the columns
if(x[j]==1 & current>0){  # a value of 1 means I won the bet
current<-current+(100)
b[i,j+1]=current
}else  (x[j]==0 & current>0)
current<-current-(100)
b[i,j+1]=current
if (current<= 0 ){
a[j]=1  # if you loose all your money it counts that
break
}
}
}
View(b)
